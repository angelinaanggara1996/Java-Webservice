/*
 * Copyright (c) 2016 Kevin Herron
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 *
 * The Eclipse Public License is available at
 *   http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 *   http://www.eclipse.org/org/documents/edl-v10.html.
 */

package org.eclipse.milo.examples.client;

import java.util.concurrent.CompletableFuture;

import org.eclipse.milo.opcua.sdk.client.OpcUaClient;
import org.eclipse.milo.opcua.stack.core.types.builtin.DataValue;
import org.eclipse.milo.opcua.stack.core.types.builtin.NodeId;
import org.eclipse.milo.opcua.stack.core.types.builtin.StatusCode;
import org.eclipse.milo.opcua.stack.core.types.builtin.Variant;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WriteExample implements ClientExample {

    public static void main(String[] args) throws Exception {
        WriteExample example = new WriteExample();

        new ClientExampleRunner(example).run();
    }

    private final Logger logger = LoggerFactory.getLogger(getClass());

    @Override
    public void run(OpcUaClient client, CompletableFuture<OpcUaClient> future) throws Exception {
        // synchronous connect
        client.connect().get();
        
        for(int i = 0 ; i < 3 ; i++) {
        	Variant v = new Variant((short)100); //anggara test
        	Variant v1 = new Variant("AS"); //anggara test
            NodeId nodeId = NodeId.parse("ns=2;s=Channel4.Device4.D"+i); //anggara test
            StatusCode stat=null;
            switch(i) {
            	case 2:
            		stat = client.writeValue(nodeId, DataValue.valueOnly(v1)).get(); //anggara test
            		break;
            	default:
            		stat = client.writeValue(nodeId, DataValue.valueOnly(v)).get(); //anggara test
            		break;
            }
            if (stat.isGood()) {
                logger.info("Wrote '{}' to nodeId={}", v, nodeId); //anggara test
            }
            else
            	logger.error("Connection BAD");
        }
        
        
        /*
        //D0***************************************************************************************
        Variant v = new Variant((short)100); //anggara test
        NodeId nodeId = NodeId.parse("ns=2;s=Channel4.Device4.D0"); //anggara test
        // don't write status or timestamps
        StatusCode stat = client.writeValue(nodeId, DataValue.valueOnly(v)).get(); //anggara test
        
        if (stat.isGood()) {
            //logger.info("Wrote '{}' to nodeId={}", v, nodeIds.get(0));
            logger.info("Wrote '{}' to nodeId={}", v, nodeId); //anggara test
        }
        
        //D1***************************************************************************************
        Variant v1 = new Variant((short)500); //anggara test
        NodeId nodeId1 = NodeId.parse("ns=2;s=Channel4.Device4.D1"); //anggara test
        // don't write status or timestamps
        StatusCode stat1 = client.writeValue(nodeId1, DataValue.valueOnly(v1)).get(); //anggara test
        
        if (stat1.isGood()) {
            //logger.info("Wrote '{}' to nodeId={}", v, nodeIds.get(0));
            logger.info("Wrote '{}' to nodeId={}", v1, nodeId1); //anggara test
        }
        
        //D2***************************************************************************************
        Variant v2 = new Variant("BBB"); //anggara test
        NodeId nodeId2 = NodeId.parse("ns=2;s=Channel4.Device4.D2"); //anggara test
        // don't write status or timestamps
        StatusCode stat2 = client.writeValue(nodeId2, DataValue.valueOnly(v2)).get(); //anggara test
        
        if (stat2.isGood()) {
            //logger.info("Wrote '{}' to nodeId={}", v, nodeIds.get(0));
            logger.info("Wrote '{}' to nodeId={}", v2, nodeId2); //anggara test
        }
        */
        //List<NodeId> nodeIds = ImmutableList.of(new NodeId(2, "Channel4.Device4.D0")); //anggara test
        //List<NodeId> nodeIds = ImmutableList.of(new NodeId(2, "HelloWorld/ScalarTypes/Int32")); 

        /*
       	for (int i = 0; i < 10; i++) {
            Variant v = new Variant((short)100); //anggara test
            NodeId nodeId = NodeId.parse("ns=2;s=Channel4.Device4.D0"); //anggara test
            // don't write status or timestamps
            StatusCode stat = client.writeValue(nodeId, DataValue.valueOnly(v)).get(); //anggara test
            //DataValue dv = new DataValue(v, null, null);
            //DataValue dv = DataValue.valueOnly(v);
            // write asynchronously....
           // CompletableFuture<List<StatusCode>> f =
             //   client.writeValues(nodeIds, ImmutableList.of(dv));

            // ...but block for the results so we write in order
            
           	List<StatusCode> statusCodes = f.get();
            StatusCode status = statusCodes.get(0);
            logger.info("sssssssssss={}",dv.getValue());
            
            if (stat.isGood()) {
                //logger.info("Wrote '{}' to nodeId={}", v, nodeIds.get(0));
                logger.info("Wrote '{}' to nodeId={}", v, nodeId); //anggara test
            }
            */
        //}

        future.complete(client);
    }

}
